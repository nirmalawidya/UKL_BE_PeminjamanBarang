// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  role          userRole
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  borrowRecords BorrowRecord[]
  returnRecord  ReturnRecord[]
}

model item {
  id            Int            @id @default(autoincrement())
  name          String
  category      String
  location      String
  quantity      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  borrowRecords BorrowRecord[]
  returnRecord  ReturnRecord[]
}

model BorrowRecord {
  borrow_id    Int           @id @default(autoincrement())
  user_id      Int // Foreign key
  item_id      Int // Foreign key
  borrow_date  DateTime
  return_date  DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
  ReturnRecord ReturnRecord?
  user         user          @relation(fields: [user_id], references: [id])
  item         item          @relation(fields: [item_id], references: [id])
}

model ReturnRecord {
  return_id          Int          @id @default(autoincrement())
  borrow_id          Int          @unique
  user_id            Int // Foreign key
  item_id            Int // Foreign key
  actual_return_date DateTime
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now())
  BorrowRecord       BorrowRecord @relation(fields: [borrow_id], references: [borrow_id])
  users              user         @relation(fields: [user_id], references: [id])
  items              item         @relation(fields: [item_id], references: [id])
}

enum userRole {
  Admin
  Member
}
